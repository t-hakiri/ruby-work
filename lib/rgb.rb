def to_hex(r,g,b)
  hex = '#'
  [r,g,b].each do |n|
    hex += n.to_s(16).rjust(2, '0')
  end
  hex
end








# Q1 to_hexとは何をするメソッドか？どのような値を受け取ってどのような値を返す？
# => 0~255までの数字を3つ、r, g, bという3つの引数で受け取る想定のメソッド。r, g, bの引数にはそれぞれ0~255までの数字が入る（はず）
# => その後、その3つの引数を16進数の数字に直して、それらを全て結合した文字列を返却するメソッド。
# Q2 to_intsとは何をするメソッドか？どのような値を受け取ってどのような値を返す？
# => ''#121212'のような文字列の引数を一つ受け取る想定のメソッド。先頭に'#'がついて、その後16進数で255（ff）までの数字が3つくっついている形の文字列が入る（はず）
# => その後、その文字列を、10進数の3つのを数字に分解して、それらをそれぞれ配列に入れ、その配列を返却するメソッド。
# （ここからto_hexメソッドについて）
# Q3 （to_hexメソッドについて）rという引数に4, gという引数に60, bという引数に120が入っている時、[r, g, b].inject('#') do |hex, n|の処理の１回目のループでは、hex引数とn引数の中になんの値が入っている？
# => inject('#')というメソッドは、１回目のループで第一引数（hex）に引数（この場合だと'#'という文字列）を代入し、第二引数（n）に、レシーバ（この場合だとrの中の値の4）の値を代入します。
# Q4（Q3に続いて）第一引数（hex）に'#'という文字列、第二引数（n）に、rの中の値の4の値が代入されている時、hex + n.to_s(16).rjust(2, '0')の処理が実行されると、どのような値が返り値として返りますか？
# => hexに文字列の'#'、nに4が入っているので、'#' + 4.to_s(16).rjust(2, '0')となり、'#' + '4'.rjust(2, '0')となり、'#' + '04'となり、'#04'が、返り値となる。
# Q5（Q4に続いて）'#04'という返り値が１回目のループで返り、gという引数に60が入っている時、[r, g, b].inject('#') do |hex, n|の処理の２回目のループでは、hex引数とn引数の中になんの値が入っている？
# => inject('#')というメソッドは、２回目以降のループで第一引数（hex）に１回目のループで得られた値の返り値（この場合だと'#04'という文字列）
# => を代入し、第二引数（n）に、レシーバ（この場合だとgの中の値の60）の値を代入する。
# Q6（Q5に続いて）第一引数（hex）に'#04'という文字列、第二引数（n）に、gの中の値の60の値が代入されている時、hex + n.to_s(16).rjust(2, '0')の処理が実行されると、どのような値が返り値として返りますか？
# => hexに文字列の'#04'、nに60が入っているので、'#04' + 60.to_s(16).rjust(2, '0')となり、'#04' + '3c'.rjust(2, '0')となり、'#04' + '3c'となり、'#043c'が、返り値となる。
# => 10進数で60は、16進数で3cとなる。（計算式：16*3 + 12 => 3c）
# => （10進数では数字が10に達すると桁が上がる。16進数では数字が16に達すると桁が上がる）となる。
# => （16進数では、0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, Fと数える（10=A、11=B,12=C,13=D, 14=E, 15=F））
# => なので、10進数での60は16進数では3cとなる。
# Q7（Q6に続いて）'#043c'という返り値が２回目のループで返り、bという引数に120が入っている時、[r, g, b].inject('#') do |hex, n|の処理の３回目のループでは、hex引数とn引数の中になんの値が入っている？
# => inject('#')というメソッドは、２回目以降のループで第一引数（hex）に１回目のループで得られた値の返り値（この場合だと'#043c'という文字列）
# => を代入し、第二引数（n）に、レシーバ（この場合だとgの中の値の120）の値を代入する。
# Q8（Q7に続いて）第一引数（hex）に'#043c'という文字列、第二引数（n）に、gの中の値の120の値が代入されている時、hex + n.to_s(16).rjust(2, '0')の処理が実行されると、どのような値が返り値として返りますか？
# => hexに文字列の'#043c'、nに120が入っているので、'#043c' + 120.to_s(16).rjust(2, '0')となり、'#043c' + '78'.rjust(2, '0')となり、'#043c' + '78'となり、'#043c78'が、返り値となる。
# => 10進数で120は、16進数で78となる。（計算式：16*7 + 8 => 78）
# => （10進数では数字が10に達すると桁が上がる。16進数では数字が16に達すると桁が上がる）となる。
# => （16進数では、0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, Fと数える（10=A、11=B,12=C,13=D, 14=E, 15=F））
# => なので、10進数での120は16進数では78となる。
# （ここからto_intsメソッドについて）
# Q9 hexメソッドでどういう処理をするメソッド？
# => 文字列で16進数の値を渡すと、それを10進数の数字にして返却するメソッド
# Q10 （to_intsメソッドについて）to_intsメソッドのhexという引数に'#043c78'という文字列が渡されたら、r, g, bという3つの変数にはそれぞれ何の値が入っている？
# => rには　文字列の（ここ重要）　'04'という値、 gには　文字列の（ここ重要）　'3c'という値、 rには　文字列の（ここ重要）　'78'という値が入る
# Q11 （Q10に続いて）[r, g, b].map do |s|  ~  s.hex  ~  endという処理で、
# rには　文字列の（ここ重要）　'04'という値、 gには　文字列の（ここ重要）　'3c'という値、 rには　文字列の（ここ重要）　'78'という値が入っていると仮定した時、
# このメソッドの返り値にはどのような値が入る？
# => mapメソッドとは、レシーバの配列の要素一つ一つをブロック変数に入れ、その変数に内部処理（この場合だと s.hex という処理）をかけたもの全てを最終的なメソッドの返り値として返すメソッド
# => 今回の場合だと、まずrの中に入っている'04'をブロック変数sに入れ、s.hexメソッドを起動するので、 '04'.hex という形でメソッドが起動されるため、１回目のループで4という返り値が返る
# => 次にgの中に入っている'3c'をブロック変数sに入れ、s.hexメソッドを起動するので、 '3c'.hex という形でメソッドが起動されるため、２回目のループで60という返り値が返る
# => 次にbの中に入っている'78'をブロック変数sに入れ、s.hexメソッドを起動するので、 '78'.hex という形でメソッドが起動されるため、３回目のループで120という返り値が返る
# => よって、[r（='35'）, g（='9a'）, b（='2c'）]という配列に[r, g, b].map do |s|  ~  s.hex  ~  endという処理をかけると、[4, 60, 120]という配列の値が返却される
# 
# 
# 
# 
# 
# 
# 